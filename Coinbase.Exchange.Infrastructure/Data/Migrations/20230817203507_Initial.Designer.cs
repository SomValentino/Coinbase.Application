// <auto-generated />
using System;
using Coinbase.Exchange.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Coinbase.Exchange.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ExchangeDbContext))]
    [Migration("20230817203507_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClientInstrument", b =>
                {
                    b.Property<string>("ClientsClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductGroupsName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClientsClientId", "ProductGroupsName");

                    b.HasIndex("ProductGroupsName");

                    b.ToTable("ClientInstrument");
                });

            modelBuilder.Entity("Coinbase.Exchange.Domain.Entities.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Coinbase.Exchange.Domain.Entities.ClientRegistration", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientId");

                    b.ToTable("ClientRegistrations");
                });

            modelBuilder.Entity("Coinbase.Exchange.Domain.Entities.Instrument", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("productGroups");
                });

            modelBuilder.Entity("Coinbase.Exchange.Domain.Entities.Setting", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("ClientInstrument", b =>
                {
                    b.HasOne("Coinbase.Exchange.Domain.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coinbase.Exchange.Domain.Entities.Instrument", null)
                        .WithMany()
                        .HasForeignKey("ProductGroupsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Coinbase.Exchange.Domain.Entities.ClientRegistration", b =>
                {
                    b.HasOne("Coinbase.Exchange.Domain.Entities.Client", "Client")
                        .WithOne("ClientRegistration")
                        .HasForeignKey("Coinbase.Exchange.Domain.Entities.ClientRegistration", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Coinbase.Exchange.Domain.Entities.Client", b =>
                {
                    b.Navigation("ClientRegistration")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
